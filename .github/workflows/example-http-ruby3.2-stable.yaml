name: examples/http-ruby3.2 (stable)

on:
  workflow_dispatch:

  push:
    branches: [main]
    paths:
    - '.github/workflows/example-http-ruby3.2-stable.yaml'
    - 'http-ruby3.2/**'
    - '!http-ruby3.2/README.md'

  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main]
    paths:
    - '.github/workflows/example-http-ruby3.2-stable.yaml'
    - 'http-ruby3.2/**'
    - '!http-ruby3.2/README.md'

  schedule:
  - cron: '45 15 * * 1-5'

# Automatically cancel in-progress actions on the same branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request_target' && github.head_ref || github.ref }}
  cancel-in-progress: true

env:
  UKC_METRO: "https://api.${{ vars.UKC_METRO_STABLE }}.unikraft.cloud/v1"
  UKC_TOKEN: ${{ secrets.UKC_TOKEN }}
  KRAFTKIT_NO_CHECK_UPDATES: true
  KRAFTKIT_LOG_LEVEL: debug

jobs:
  integration:
    timeout-minutes: 60
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Test
      id: test
      uses: unikraft/kraftkit@staging
      continue-on-error: true
      with:
        run: |
          set -xe;

          cd http-ruby3.2;

          kraft cloud deploy \
            --no-start \
            --memory 256 \
            --name http-ruby32-${GITHUB_RUN_ID} \
            --runtime index.unikraft.io/official-testing/ruby:3.2 \
            --subdomain http-ruby32-${GITHUB_RUN_ID} \
            -p 443:8080 \
            .;

          # wait for the instance to start
          kraft cloud vm start -w 5s http-ruby32-${GITHUB_RUN_ID};
          sleep 5;

          curl -Lv --fail-with-body --max-time 10 https://http-ruby32-${GITHUB_RUN_ID}.${{ vars.UKC_METRO_STABLE }}.unikraft.app

    - name: Cleanup
      uses: unikraft/kraftkit@staging
      if: always()
      with:
        run: |
          set -xe;

          kraft cloud vm stop http-ruby32-${GITHUB_RUN_ID} || true;
          kraft cloud vm logs http-ruby32-${GITHUB_RUN_ID} || true;
          kraft cloud vm rm http-ruby32-${GITHUB_RUN_ID} || true;
          kraft cloud img rm index.unikraft.io/test/http-ruby32-${GITHUB_RUN_ID} || true;

    - name: Re-test with debug info
      id: re-test
      if: ${{ success() && steps.test.outcome == 'failure' }}
      uses: unikraft/kraftkit@staging
      with:
        run: |
          set -xe;

          cd http-ruby3.2;

          kraft cloud deploy \
            --no-start \
            --memory 256 \
            --name http-ruby32-${GITHUB_RUN_ID}-dbg \
            --runtime index.unikraft.io/official-testing/ruby:3.2-dbg \
            --subdomain http-ruby32-${GITHUB_RUN_ID}-dbg \
            -p 443:8080 \
            .;

          # wait for the instance to start
          kraft cloud vm start -w 5s http-ruby32-${GITHUB_RUN_ID}-dbg;
          sleep 5;

          curl -Lv --fail-with-body --max-time 10 https://http-ruby32-${GITHUB_RUN_ID}-dbg.${{ vars.UKC_METRO_STABLE }}.unikraft.app

    - name: Cleanup Debug
      uses: unikraft/kraftkit@staging
      if: always()
      with:
        run: |
          set -xe;

          kraft cloud vm stop http-ruby32-${GITHUB_RUN_ID}-dbg || true;
          kraft cloud vm logs http-ruby32-${GITHUB_RUN_ID}-dbg || true;
          kraft cloud vm rm http-ruby32-${GITHUB_RUN_ID}-dbg || true;
          kraft cloud img rm index.unikraft.io/test/http-ruby32-${GITHUB_RUN_ID}-dbg || true;
